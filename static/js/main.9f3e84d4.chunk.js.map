{"version":3,"sources":["components/nav.jsx","redux/weather-reducer.jsx","assets/api.js","containers/nav-container.jsx","redux/thunk.jsx","date-creator/date-creator.jsx","assets/preloader/preloader.jsx","assets/assisting-function.jsx","components/data-weather.jsx","containers/data-weather-container.jsx","components/daily-weather.jsx","containers/daily-weather-container.jsx","components/weather.jsx","components/contacts.jsx","components/selected-day-weather.jsx","containers/selected-weather-container.jsx","components/home-page.jsx","App.js","serviceWorker.js","redux/store.jsx","index.js"],"names":["NavBar","cityValue","getCityValue","getCurrentWeather","data","className","onKeyDown","e","keyCode","value","onChange","target","placeholder","aria-hidden","to","initialState","isLoading","dailyData","error","loader","loading","type","getWeatherData","getDailyData","showRequestError","weatherReducer","state","action","API","fetch","lat","lon","NavContainer","this","props","React","Component","connect","dispatch","a","then","res","json","dataWeather","cod","coord","dailyWeather","date","milliseconds","Date","toLocaleString","day","weekday","month","getTime","hour","minute","Preloader","setTemperature","temp","Math","ceil","toString","DataWeather","Array","isArray","map","i","key","id","weather","main","w","description","sys","country","name","el","temp_min","temp_max","pressure","humidity","wind","speed","clouds","all","sunrise","sunset","DataWeatherContainer","DailyWeatherData","checkCod","length","sliceDailyData","daily","slice","dt","feels_like","DailyWeatherContainer","Weather","Contact","href","OpenDetailWeather","match","params","morn","eve","night","wind_speed","wind_gust","index","rain","SelectedWeatherContainer","HomePage","App","path","render","Boolean","window","location","hostname","reducers","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","console","log","loadFromLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","subscribe","stringify","setItem","saveToLocalStorage","getState","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9f3e84d4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst NavBar = ({cityValue,getCityValue,getCurrentWeather,data}) => {\r\n    \r\n    const handleClick = (e) => {\r\n        if(e.keyCode === 13) {\r\n            getCurrentWeather(cityValue)\r\n            getCityValue('')\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"row\">\r\n            <div className='col-lg-8 search-bar'>\r\n                <input  onKeyDown={handleClick}  \r\n                        value={cityValue} \r\n                        onChange={e => getCityValue(e.target.value)}   \r\n                        placeholder='Search Location...' \r\n                />\r\n                <i className=\"fa fa-search fa-box\" aria-hidden=\"true\"></i>\r\n            </div>\r\n            <div className='col-lg-4 nav-bar' >\r\n                <ul>\r\n                    <li><NavLink to='/Home'>Home</NavLink></li>\r\n                    <li><NavLink to='/Weather'>Weather</NavLink></li>\r\n                    <li><NavLink to='/Contact'>Contact</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar \r\n","\r\nconst SEARCH_CITY = 'SEARCH_CITY'\r\nconst WEATHER_IS_LOADING = 'WEATHER_IS_LOADING'\r\nconst GET_WEATHER_DATA = 'GET_WEATHER_DATA'\r\nconst GET_DAILY_DATA = 'GET_DAILY_DATA'\r\nconst SHOW_ERROR = 'SHOW_ERROR'\r\nconst CLEAR_ARRAY = 'CLEAR_ARRAY'\r\n\r\n\r\nconst initialState = {\r\n    cityValue: '',\r\n    isLoading: false,\r\n    data: [],\r\n    dailyData: [],\r\n    error: ''\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case SEARCH_CITY: {\r\n            return {\r\n                ...state,\r\n                cityValue: action.value\r\n            }\r\n        }\r\n        case WEATHER_IS_LOADING: {\r\n            return {\r\n                ...state,\r\n                isLoading: action.loading\r\n            }\r\n        }\r\n        case GET_WEATHER_DATA: {\r\n            return {\r\n                ...state,\r\n                data: [action.data]\r\n            }\r\n        }\r\n        case GET_DAILY_DATA: {\r\n            return {\r\n                ...state,\r\n                dailyData: action.data\r\n            }\r\n        }\r\n        case SHOW_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case CLEAR_ARRAY: {\r\n            return {\r\n                ...state,\r\n                data: [],\r\n                dailyData: []\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCityValue = value => ({type: 'SEARCH_CITY', value})\r\nexport const loader = loading => ({type: 'WEATHER_IS_LOADING', loading})\r\nexport const getWeatherData = data => ({type: 'GET_WEATHER_DATA',data})\r\nexport const getDailyData = data => ({type: 'GET_DAILY_DATA' , data})\r\nexport const showRequestError = error => ({type: 'SHOW_ERROR', error})\r\nexport const clearArray = () => ({type: 'CLEAR_ARRAY'})\r\n\r\nexport default weatherReducer","\r\nexport const API = {\r\n    // current weather\r\n    searchWeather(value) {\r\n        return fetch(`//api.openweathermap.org/data/2.5/weather?q=${value}&units=metric&APPID=c642720d21a1266566dcdf10018f3866`)\r\n    },\r\n    searchDailyWeather(lat,lon){\r\n        //daily weather\r\n        // &units=metric to convert calvin in celsius\r\n       return fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=hourly&appid=c642720d21a1266566dcdf10018f3866`)\r\n    }\r\n} \r\n\r\n\r\n","import React from 'react'\r\nimport NavBar from '../components/nav'\r\nimport { connect } from 'react-redux'\r\nimport { getCityValue } from '../redux/weather-reducer'\r\nimport { getCurrentWeather } from '../redux/thunk'\r\n\r\nclass NavContainer extends React.Component {\r\n\r\n    render(){\r\n        return (\r\n            <NavBar {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    cityValue: state.weatherReducer.cityValue,\r\n    data: state.weatherReducer.data\r\n})\r\n\r\nexport default connect(mapStateToProps, {getCityValue,getCurrentWeather})(NavContainer)","\r\nimport { API } from \"../assets/api\"\r\nimport { getWeatherData, loader, getDailyData, showRequestError, clearArray } from \"./weather-reducer\"\r\n\r\nexport const getCurrentWeather = (data) => async dispatch => {\r\n    //set loader\r\n    dispatch(loader(true))\r\n\r\n    //current weather request\r\n    let dataWeather = await API.searchWeather(data).then(res => res.json())\r\n    if( dataWeather.cod === '400' || dataWeather.cod === '404'){\r\n        //in case of error - show error\r\n        dispatch(showRequestError('The city is not found'))\r\n        //clear array to prevent error [0] of undefined\r\n        dispatch(clearArray())\r\n    }else {\r\n        dispatch(getWeatherData(dataWeather))\r\n        dispatch(showRequestError(''))\r\n    } \r\n\r\n    //get lat,lon coordinates \r\n    let lat = dataWeather.cod === '400' || dataWeather.cod === '404' ? null : dataWeather.coord.lat\r\n    let lon = dataWeather.cod === '400' || dataWeather.cod === '404' ? null : dataWeather.coord.lon\r\n\r\n    //daily weather request\r\n    let dailyWeather = await API.searchDailyWeather(lat,lon).then(res => res.json()) \r\n\r\n    if(dailyWeather.cod === '404'){\r\n        dispatch(clearArray())\r\n    }else {\r\n        dispatch(getDailyData(dailyWeather))\r\n    }\r\n    \r\n    dispatch(loader(false))  \r\n}","export const dateCreator = () => {\r\n\r\n    let i = new Date();\r\n    let getFullDate = i.toLocaleString('en-gb', { day:'numeric', weekday: 'long', month: 'long' });\r\n\r\n    return getFullDate\r\n  }\r\n\r\nexport let date = (milliseconds) => new Date(milliseconds * 1000).toLocaleString('en-gb', { day:'numeric', weekday: 'long', month: 'long' })\r\nexport let getTime = milliseconds => new Date(milliseconds * 1000).toLocaleString('en-gb', {hour: '2-digit', minute: 'numeric'})\r\n","import React from 'react'\nimport './preloader.css'\n\nexport const Preloader = () => <div className=\"container text-center\"><div className=\"lds-facebook\"><div></div><div></div><div></div></div></div>","import React from 'react'\r\n\r\n\r\nexport const setTemperature = temp => <span>{Math.ceil(temp).toString()}°C</span>\r\n\r\n","import React from 'react'\r\nimport { dateCreator, getTime } from '../date-creator/date-creator'\r\nimport { Preloader } from '../assets/preloader/preloader'\r\nimport { setTemperature } from '../assets/assisting-function'\r\n\r\nconst DataWeather = ({data,isLoading,error}) => {\r\n    const setData = () => {\r\n        if(data && Array.isArray(data)){\r\n            return (\r\n                <div className=\"main-container\">\r\n                    <div className=\"row box-row-container justify-content-center\">\r\n                        <div className=\"col-lg-7\">\r\n                            {data.map(i => <div className='weather-box' key={i.id}>\r\n                                <div className='weatherConditions'>\r\n                                    {i.weather[0].main === 'Rain' ? <i className=\"fa fa-tint\" aria-hidden=\"true\"></i> : null}\r\n                                    {i.weather[0].main === 'Clouds' ? <i className=\"fa fa-cloud\" aria-hidden=\"true\"></i> : null }\r\n                                    {i.weather[0].main === 'Clear' ? <i className=\"fa fa-sun-o\" aria-hidden=\"true\"></i> : null }\r\n                                </div>\r\n    \r\n                                <div className=\"temperature\">\r\n                                    {Math.ceil(i.main.temp)}\r\n                                    <i className=\"celsius\">&#176;С</i>\r\n                                    <span>{i.weather.map(w => w.description)}</span>\r\n                                </div>\r\n                            </div>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"col-lg-5 \">\r\n                            { data.map(i => \r\n                            <div className='time-box' key={i.id}>\r\n                                {dateCreator(new Date())}\r\n                                <br />\r\n                                <div className='country'>{i.sys.country},</div>\r\n                                <div className='city'>{i.name}</div>\r\n                            </div>)}\r\n                        </div>\r\n                        <div className=\"col-lg-11\">\r\n                            {data.map(el => \r\n                                <div key={el.id} className='details-current-weather text-center'>\r\n                                    <div className=\"col-lg-6\">\r\n                                        <div>\r\n                                            Min/Max temperature: {setTemperature(el.main.temp_min)} / {setTemperature(el.main.temp_max)} \r\n                                        </div>\r\n                                        <div>Pressure: {el.main.pressure} hPa</div>\r\n                                        <div>Humidity: {el.main.humidity}%</div>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-lg-6\">\r\n                                        <div>Wind speed: {el.wind.speed} m/s</div>\r\n                                        <div>Cloudiness: {el.clouds.all}%</div>\r\n                                        <div>Sunrise: {getTime(el.sys.sunrise)} h/m</div>\r\n                                        <div>Sunset: {getTime(el.sys.sunset)} h/m</div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <hr/>\r\n                </div>\r\n            )\r\n        }else {\r\n            return isLoading === true ? <Preloader /> : null\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {error === '' ? null : <div className='city-error'>{error}</div>}\r\n            {setData()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataWeather","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport DataWeather from '../components/data-weather'\r\n\r\nclass DataWeatherContainer extends React.Component {\r\n\r\n    render(){\r\n        return (\r\n            <DataWeather {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    data: state.weatherReducer.data,\r\n    isLoading: state.weatherReducer.isLoading,\r\n    error: state.weatherReducer.error\r\n})\r\n\r\nexport default connect(mapStateToProps)(DataWeatherContainer)","import React from 'react'\nimport { Preloader } from '../assets/preloader/preloader'\nimport { NavLink } from 'react-router-dom'\nimport { date } from '../date-creator/date-creator'\n\n\nconst DailyWeatherData = ({dailyData, isLoading}) => {\n\n    let checkCod = dailyData.cod === '400' || dailyData.length === 0 \n\n    // request returns weather for 10 day, but this app need only 6 days. Using slice to make new array with params it need.\n    let sliceDailyData = dailyData.daily ? dailyData.daily.slice(1,7) : null\n\n    //making preloader\n    const getWeatherStatistic = () => {\n\n        if(dailyData && Array.isArray(sliceDailyData)){\n            return (\n                <div className='row scrolling-wrapper justify-content-center'>\n                    {sliceDailyData ? sliceDailyData.map(i => \n                        <div key={i.dt} className=\"col-lg-3 box-daily-weather\">\n                            <div className='date-box'>\n                                {date(i.dt)}\n                            </div>\n                            <NavLink to={'/WeatherDayStat/' + i.dt.toString()}>\n                                <div className=\"temp-day\">\n                                    {Math.ceil(i.temp.day)}°C\n                                </div>\n                                <div className=\"feels-like\">\n                                    Feels like: {Math.ceil(i.feels_like.day)}°C\n                                </div>\n                                <div className=\"daily-weather-condition\">\n                                    Condition: {i.weather.map(i => i.main)} \n                                </div>\n                            </NavLink>\n                        </div>\n                   ) : null}\n                </div>\n            )\n        } else {\n            return isLoading === true ? <Preloader /> : null\n        }\n    }\n    \n    return ( \n        <div> \n            <div className=\"daily-weather-container\">\n                {checkCod ? null : <div className=\"daily-title\">Daily Weather</div>}\n                {getWeatherStatistic()}\n                <div className=\"keep-up-to-date\">\n                    {checkCod ? <p>Keep up to date with the latest weather</p> : null}\n                </div>\n            </div> \n        </div>\n    )\n}\n\nexport default DailyWeatherData","import React from 'react'\nimport { connect } from 'react-redux'\nimport DailyWeatherData from '../components/daily-weather'\n\n\n\nclass DailyWeatherContainer extends React.Component {\n    render(){\n        return (\n            <DailyWeatherData {...this.props} />\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    dailyData: state.weatherReducer.dailyData,\n    isLoading: state.weatherReducer.isLoading\n})\n\nexport default connect(mapStateToProps)(DailyWeatherContainer)","import React from 'react'\r\nimport NavContainer from '../containers/nav-container'\r\nimport DataWeatherContainer from '../containers/data-weather-container'\r\nimport DailyWeatherContainer from '../containers/daily-weather-container'\r\n\r\nconst Weather = () => {\r\n\r\n    return(\r\n        <div className='container weather-container'>\r\n            <NavContainer />\r\n            <DataWeatherContainer />\r\n            <DailyWeatherContainer />\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Weather\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row box-contacts\">\r\n                <div className=\"col-sm-12 text-center contacts-container\">\r\n                    <div className=\"contact-with-me\">\r\n                        Would you like to contact with me? \r\n                        <i className=\"fa fa-smile-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                    <a href='https://t.me/dmitriy_k23' className='fa fa-telegram fa-2x'></a>\r\n                    <a href='https://www.linkedin.com/in/dmitriy-kulikovskiy-1467711a2/?locale=ru_RU' className='fa fa-linkedin fa-2x'></a>\r\n                    <a href='https://github.com/DmitriyKulikovskiy' className='fa fa-github fa-2x'></a>\r\n\r\n                    <div className=\"return-to-other-pages\">\r\n                        <div className=\"title-return-pages\">\r\n                            Back to  <span className='back-home'><NavLink to='/Home'>Home</NavLink></span> | <span className='back-weather'><NavLink to='/Weather'>Weather</NavLink></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React from 'react'\r\nimport { date, getTime } from '../date-creator/date-creator';\r\nimport { setTemperature } from '../assets/assisting-function';\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst OpenDetailWeather = ({match,dailyData}) => {\r\n    const {params} = match; \r\n    const {id} = params;\r\n    let sliceDailyData = dailyData.daily ? dailyData.daily.slice(1,7) : null\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {sliceDailyData.map(el => el.dt.toString() === id \r\n                ?   <div key={el.dt} className=\"box-selected row justify-content-center\">\r\n\r\n                        <div className=\"sel-day\">\r\n                            {date(el.dt)}\r\n                        </div>\r\n        \r\n                        <hr />\r\n\r\n                        <div className=\"day-column col-lg-5\">\r\n                            <div className=\"day-title\">Day</div> \r\n                            <hr/>   \r\n                            <div>Sunrise: {getTime(el.sunrise)} h/m</div>\r\n                            <div>Morning temperature: {setTemperature(el.temp.morn)}</div>\r\n                            <div>Day temperature: {setTemperature(el.temp.day)}</div>   \r\n                            <div>Feels like: {setTemperature(el.feels_like.day)}</div>                       \r\n                        </div>\r\n\r\n                        <div className=\"night-column col-lg-5\">\r\n                            <div className=\"night-title\">Night</div>\r\n                            <hr/>\r\n                            <div>Sunset: {getTime(el.sunset)} h/m</div>\r\n                            <div>Evening temperature: {setTemperature(el.temp.eve)}</div>\r\n                            <div>Night temperature: {setTemperature(el.temp.night)}</div>\r\n                            <div>Feels like: {setTemperature(el.feels_like.night)}</div> \r\n                        </div>\r\n\r\n                        <div className=\"other-column col-lg-5\">\r\n                            <div className=\"other-title\">Other</div>\r\n                            <hr/>\r\n                            <div>Pressure: {el.pressure} hPa</div>\r\n                            <div>Wind speed: {el.wind_speed} m/s</div>\r\n                            <div>Wind gust: {el.wind_gust} m/s</div>\r\n                            <div>Cloudiness: {el.clouds}% </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"weather-column col-lg-5\">\r\n                            <div className=\"weather-title\">Weather</div>\r\n                            <hr/>\r\n                            {el.weather.map((el ,index) => \r\n                                <div key={index}>\r\n                                    <div>Weather condition: {el.main}</div>\r\n                                    <div>Description: {el.description}</div>\r\n                                </div>\r\n                            )}\r\n                            <div>Precipitation volume: {el.rain}mm</div>\r\n                            <div>Humidity: {el.humidity}</div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-12 button-back\">\r\n                            <NavLink to='/Weather/'>\r\n                                Go back\r\n                                <i className=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>\r\n                            </NavLink>\r\n                        </div>\r\n                    </div>\r\n                : null\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpenDetailWeather","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport OpenDetailWeather from '../components/selected-day-weather'\r\n\r\n\r\nclass SelectedWeatherContainer extends React.Component {\r\n\r\n    render(){\r\n        return (\r\n            <OpenDetailWeather {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    dailyData: state.weatherReducer.dailyData,\r\n    isLoading: state.weatherReducer.isLoading\r\n})\r\n\r\nexport default connect(mapStateToProps)(SelectedWeatherContainer)","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row home-box\">\r\n                <div className=\"col-sm-12 text-center \">\r\n                    <div className=\"title-home\">\r\n                        Find out the weather for 7 days using our application.\r\n                    </div>\r\n                    <div className=\"start\">\r\n                        <span className=\"circle\"></span>\r\n\r\n                        <NavLink to='/Weather/'>\r\n                            Start\r\n                            <i className=\"fa fa-play\" aria-hidden=\"true\"></i>\r\n                        </NavLink>\r\n\r\n                        <span className=\"circle\"></span>\r\n                    </div>\r\n                    <div className='made'>Made by <b>Dima Kulikovskiy </b> &#169; 2020</div>\r\n                </div>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default HomePage","import React from 'react';\nimport './index.sass'\nimport Weather from './components/weather';\nimport { Route, Redirect } from 'react-router-dom';\nimport Contact from './components/contacts';\nimport ModalWeatherContainer from './containers/selected-weather-container';\nimport HomePage from './components/home-page';\n\n//using Redirect to show main page \n\nconst App = () => {\n  \n  return (\n    <div className=\"App\">\n\n     <Redirect to='/Home'/> \n\n     <Route path='/Home/' render={() => <HomePage />} />\n     <Route path='/Weather/' render={() => <Weather /> }/> \n     <Route path='/WeatherDayStat/:id' render={({match}) => <ModalWeatherContainer match={match} /> }/>\n     <Route path='/Contact/' render={() => <Contact />} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport weatherReducer from \"./weather-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst saveToLocalStorage = state => {\r\n    try {\r\n        let serializedState = JSON.stringify(state)\r\n        localStorage.setItem('state', serializedState)\r\n    } catch(e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nconst loadFromLocalStorage = () => {\r\n    try{\r\n        let serializedState = localStorage.getItem('state')\r\n        if(serializedState === null) return undefined\r\n        return JSON.parse(serializedState)\r\n    }catch(e) {\r\n        console.log(e)\r\n        return undefined\r\n    }\r\n}\r\n\r\nconst reducers = combineReducers({\r\n    weatherReducer\r\n})\r\n\r\nconst persistedState = loadFromLocalStorage()\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ \r\nconst store = createStore(reducers,persistedState, composeEnhancers(applyMiddleware(thunkMiddleware))) \r\n\r\nstore.subscribe( () => saveToLocalStorage(store.getState()) )\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { HashRouter } from 'react-router-dom';\n\n\n\n// HashRouter using for ghPage, in other case use BrowserRouter\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}